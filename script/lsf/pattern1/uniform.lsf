newproject;
# 1:for taiwania, 2:for local fdtd saving time
scale_mode = 1;
# 1:for pso workflow, 2:for expand bandwidth with 200nm
band_mode = 1;
# 1:for pso workflow, 2:for accuracy fsp
accu_mode = 1;
# 1:for python, 2:for lumerical
mode = 1;
# 1:w/o, 2:with indent
indent_mode = 1;
if (mode == 1)
{
    l1 = round([para1__, para1__, para1__, para1__, para1__,
                para1__, para1__, para1__, para1__, para1__,
                para1__, para1__, para1__, para1__, para1__,
                para1__, para1__, para1__, para1__, para1__])*1e-9;
    l2 = round([para2__, para2__, para2__, para2__, para2__,
                para2__, para2__, para2__, para2__, para2__,
                para2__, para2__, para2__, para2__, para2__,
                para2__, para2__, para2__, para2__, para2__])*1e-9;
    l3 = round([para3__, para3__, para3__, para3__, para3__,
                para3__, para3__, para3__, para3__, para3__,
                para3__, para3__, para3__, para3__, para3__,
                para3__, para3__, para3__, para3__, para3__])*1e-9;
    l4 = round([para4__, para4__, para4__, para4__, para4__,
                para4__, para4__, para4__, para4__, para4__,
                para4__, para4__, para4__, para4__, para4__,
                para4__, para4__, para4__, para4__, para4__])*1e-9;
    l5 = round([para5__, para5__, para5__, para5__, para5__,
                para5__, para5__, para5__, para5__, para5__,
                para5__, para5__, para5__, para5__, para5__,
                para5__, para5__, para5__, para5__, para5__])*1e-9;
    cell_tilt = round(para6__*10)/10;
    fiber_offset = 0*1e-9;
    step1 = 220*1e-9;
    step2 = 70*1e-9;
    tilt    = 10;
} else if (mode == 2)
{
    l1 = [130, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 
          130, 130, 130, 130, 130,
          130, 130, 130, 130, 130]*1e-9;
          
    l2 = [180, 180, 180, 180, 180,
          180, 180, 180, 180, 180,
          180, 180, 180, 180, 180,
          180, 180, 180, 180, 180]*1e-9;

    l3 = [650, 650, 650, 650, 650,
          650, 650, 650, 650, 650,
          650, 650, 650, 650, 650,
          650, 650, 650, 650, 650]*1e-9;
    
    l4 = [60, 60, 60, 60, 60,
          60, 60, 60, 60, 60,
          60, 60, 60, 60, 60,
          60, 60, 60, 60, 60]*1e-9;
          
    l5 = [30, 30, 30, 30, 30,
          30, 30, 30, 30, 30,
          30, 30, 30, 30, 30,
          30, 30, 30, 30, 30]*1e-9;
    cell_tilt = 2.3;
    fiber_offset = 1500*1e-9;
    step1 = 220*1e-9;
    step2 = 70*1e-9;
    tilt    = 10;
}
tct = tan(cell_tilt*pi/180);
cct = cos(cell_tilt*pi/180);
sct = sin(cell_tilt*pi/180);
unit = l3;
height = 220e-9;
N = 20;
scale = sum(unit);
if (indent_mode == 1)
{
    indent = 0;
}
else
{
    indent = scale * tct;
}
# x' = x*(tct*tct+1)+y*tct,
# y' = x*tct+y*(tct*tct+1);
p2x = 0*(tct*tct+1)+scale*tct;
p2y = 0*tct+scale*(tct*tct+1);
p3x = scale*(tct*tct+1)+scale*tct;
p3y = scale*tct+scale*(tct*tct+1);
p4x = scale*(tct*tct+1)+0*tct;
p4y = scale*tct+0*(tct*tct+1);
LBX = min([0,p2x]); #LB : lower boundary
LBY = min([0,p4y]);
UBX = max([p3x,p4x]); #UB : upper boundary
UBY = max([p2y,p3y]);
# enviroment and platform
if (scale_mode == 1)
{
    pos_extend = 6.5e-6;
    neg_extend = 2e-6;
}
else
{
    pos_extend = 2e-6;
    neg_extend = 2e-6;
}
BOX_thickness = 2e-6;
if (scale_mode == 1)
{
    fiber_distance = 2e-6;
}
else
{
    fiber_distance = 300e-9;
}
# groups---------------------------------------------
addstructuregroup;
set("name","DO_NOT_OPEN");

addstructuregroup;
set("name","other");

addanalysisgroup;
set("name","monitor");

addstructuregroup;
set("name","grating");

groupscope("::model");
# solver-----------------------------------------
addfdtd;
set("dimension", 2);  #  1 = 2D, 2 = 3D
set("x min", LBX - neg_extend);
set("x max", UBX + pos_extend);
set("y min", LBY - neg_extend);
set("y max", UBY + pos_extend);
if (scale_mode == 1)
{
    set("z min", -BOX_thickness - 0.6e-6);
}
else
{
    set("z min", -0.6e-6);
}
set("z max", height + fiber_distance + 0.6e-6);
if (accu_mode == 2)
{
    set("mesh accuracy",5);
}

# source-------------------------------------------
shift = fiber_distance*tan(tilt*pi/180);
addgaussian;
set("injection axis","z");
set("direction","Backward");
set("x", (UBX+LBX)/2-shift/(2^0.5));
set("x span",UBX-LBX);
set("y", (UBY+LBY)/2-shift/(2^0.5));
set("y span",UBY-LBY);
set("z", height+fiber_distance);
set("angle phi", 45);
set("angle theta", 0);
set("polarization angle", 45);
set("angle theta", -tilt);
set("use scalar approximation",1);
set("waist radius w0", 4.6e-6);
set("set wavelength", 1);
set("optimize for short pulse", 0);
if (band_mode == 2)
{
    set("wavelength span", 60e-9);
}else{
    set("wavelength span", 0);
}
set("center wavelength", 1.55e-6);
set("distance from waist", 2e-6-fiber_distance);



# platform-------------------------------------------
groupscope("::model::other");
# BOX
addrect;
set("name","BOX");
set("x min", -20e-6);
set("x max", 30e-6);
set("y min", -20e-6);
set("y max", 30e-6);
set("z min", -BOX_thickness);
set("z max", 0);
set("material","SiO2 (Glass) - Palik");
set("override mesh order from material database",1);
set("mesh order",5);

# substrate
addrect;
set("name","substrate");
set("x min", -20e-6);
set("x max", 30e-6);
set("y min", -20e-6);
set("y max", 30e-6);
set("z min", -BOX_thickness - 2e-6);
set("z max", -BOX_thickness);
set("material","Si (Silicon) - Palik");
set("override mesh order from material database",1);
set("mesh order",5);

# overcladding
addrect;
set("name","overcladding");
set("x min", -20e-6);
set("x max", 30e-6);
set("y min", -20e-6);
set("y max", 30e-6);
set("z min", height);
set("z max", height + fiber_distance + 1e-6);
set("material","SiO2 (Glass) - Palik");
set("override mesh order from material database",1);
set("mesh order",5);

# sidecladding
addrect;
set("name","sidecladding");
set("x min", -20e-6);
set("x max", 30e-6);
set("y min", -20e-6);
set("y max", 30e-6);
set("z min", 0);
set("z max", height);
set("material","SiO2 (Glass) - Palik");
set("override mesh order from material database",1);
set("mesh order",5);

# waveguides
vtx = [LBX + indent,UBY;
       LBX + indent,UBY + pos_extend + 1e-6;
       UBX,UBY + pos_extend + 1e-6;
       UBX,UBY];
addpoly;
set("name","wg1");
set("vertices",vtx);
set("z min",0);
set("z max",height);
set("material","Si (Silicon) - Palik");
set("override mesh order from material database",1);
set("mesh order",2);

vtx = [UBX,LBY + indent;
       UBX,UBY;
       UBX + pos_extend + 1e-6,UBY;
       UBX + pos_extend + 1e-6,LBY + indent];
addpoly;
set("name","wg2");
set("vertices",vtx);
set("z min",0);
set("z max",height);
set("material","Si (Silicon) - Palik");
set("override mesh order from material database",1);
set("mesh order",2);

select("::model::other");
addtogroup("DO_NOT_OPEN");

# monitor ----------------------------------------
groupscope("::model::monitor");
# wg1(+y)
addpower;
set("name","P_wg1");
set("monitor type","2D Y-normal");
set("x min", LBX - 1e-6 + indent);
set("x max", UBX + 1e-6);
set("y", UBY + 1e-6);
set("z", height/2);
set("z span", 0.5e-6);

addmodeexpansion;
set("name","exp_wg1");
set("monitor type","2D Y-normal");
set("x min", LBX - 1e-6 + indent);
set("x max", UBX + 1e-6);
set("y", UBY + 1e-6);
set("z", height/2);
set("z span", 0.5e-6);
setexpansion("P_wg1", "::model::monitor::P_wg1");
set("mode selection", "fundamental TE mode");

# wg2(+x)
addpower;
set("name","P_wg2");
set("monitor type","2D X-normal");
set("x", UBX + 1e-6);
set("y min", LBY - 1e-6 + indent);
set("y max", UBY + 1e-6);
set("z", height/2);
set("z span", 0.5e-6);

addmodeexpansion;
set("name","exp_wg2");
set("monitor type","2D X-normal");
set("x", UBX + 1e-6);
set("y min", LBY - 1e-6 + indent);
set("y max", UBY + 1e-6);
set("z", height/2);
set("z span", 0.5e-6);
setexpansion("P_wg2", "::model::monitor::P_wg2");
set("mode selection", "fundamental TE mode");

# wg1(-y)
addpower;
set("name","P_-wg1");
set("monitor type","2D Y-normal");
set("x min", LBX - 1e-6);
set("x max", UBX + 1e-6);
set("y", LBY - 1e-6);
set("z", height/2);
set("z span", 0.5e-6);

# wg2(-x)
addpower;
set("name","P_-wg2");
set("monitor type","2D X-normal");
set("x", LBX - 1e-6);
set("y min", LBY - 1e-6);
set("y max", UBY + 1e-6);
set("z", height/2);
set("z span", 0.5e-6);

# wg2 far (+x)
addpower;
set("name","P_wg2_far");
set("monitor type","2D X-normal");
set("x", UBX + pos_extend - 1e-6);
set("y min", LBY - 1e-6 + indent);
set("y max", UBY + 1e-6);
set("z", height/2);
set("z span", 0.5e-6);

# wg1 far (+y)
addpower;
set("name","P_wg1_far");
set("monitor type","2D Y-normal");
set("x min", LBX - 1e-6 + indent);
set("x max", UBX + 1e-6);
set("y", UBY + pos_extend - 1e-6);
set("z", height/2);
set("z span", 0.5e-6);
    
# refractive index monitors
addindex;
set("name","index_monitor_70");
set("monitor type","2D Z-normal");
set("x min", LBX - neg_extend);
set("x max", UBX + pos_extend);
set("y min", LBY - neg_extend);
set("y max", UBY + pos_extend);
set("z", 70e-9);
    
addindex;
set("name","index_monitor_150");
set("monitor type","2D Z-normal");
set("x min", LBX - neg_extend);
set("x max", UBX + pos_extend);
set("y min", LBY - neg_extend);
set("y max", UBY + pos_extend);
set("z", 150e-9);


# reflection monitor
addpower;
set("name","reflection");
set("monitor type","2D Z-normal");
set("x min", LBX - neg_extend);
set("x max", UBX + pos_extend);
set("y min", LBY - neg_extend);
set("y max", UBY + pos_extend);
set("z", height + fiber_distance + 0.5e-6);
# central top view
addpower;
set("name","top_view");
set("monitor type","2D Z-normal");
set("x min", LBX - neg_extend);
set("x max", UBX + pos_extend);
set("y min", LBY - neg_extend);
set("y max", UBY + pos_extend);
set("z", height/2);

# transmission monitor
addpower;
set("name","trasmission");
set("monitor type","2D Z-normal");
set("x min", LBX - neg_extend);
set("x max", UBX + pos_extend);
set("y min", LBY - neg_extend);
set("y max", UBY + pos_extend);
if (scale_mode == 1)
{
    set("z", -BOX_thickness - 0.5e-6);
}
else
{
    set("z", -0.5e-6);
}

#-------grating template-----------------------
xy = 0;
for (i = 1:1:N-1)
{
    xy = [xy, sum(unit(1:i))];
}


#---------------
row_structs = cell(N);
col_structs = cell(N);

for (i = 1:1:N)
{
    # create struct
    para = struct;
    para.struc1 = struct;
    para.struc2 = struct;
    
    # change to row para
    para.struc1 = {"y1":xy(i)+unit(i)-l1(i)-l4(i), "y2":xy(i)+unit(i)-l4(i)};
    para.struc2 = {"y1":xy(i)+unit(i)-l2(i)-l5(i), "y2":xy(i)+unit(i)-l5(i)};
    row_structs{i} = para;    
    
    # change to col para
    para.struc1 = {"x1":xy(i)+unit(i)-l1(i)-l4(i), "x2":xy(i)+unit(i)-l4(i)};
    para.struc2 = {"x1":xy(i)+unit(i)-l2(i)-l5(i), "x2":xy(i)+unit(i)-l5(i)};
    col_structs{i} = para;
}


groupscope("::model");
addstructuregroup;
set("name","template");

# silicon for all
vtx = [LBX,LBY;
       LBX,UBY;
       UBX,UBY;
       UBX,LBY];
addpoly;
set("name","silicon");
set("vertices",vtx);
set("z min",0);
set("z max",height);
set("material","Si (Silicon) - Palik");
set("override mesh order from material database",1);
set("mesh order",4);
addtogroup("DO_NOT_OPEN");

i = 1;
j = 1;
groupscope("::model::template");
# struc1 etching
vtx = [col_structs{j}.struc1.x1,row_structs{i}.struc1.y1;
       col_structs{j}.struc1.x2,row_structs{i}.struc1.y1;
       col_structs{j}.struc1.x2,row_structs{i}.struc1.y2;
       col_structs{j}.struc1.x1,row_structs{i}.struc1.y2];
addpoly;
set("name","struc1");
set("vertices",vtx);
set("z min",220e-9-step1);
set("z max",220e-9);
set("material","SiO2 (Glass) - Palik");
set("override mesh order from material database",1);
set("mesh order",3);
# struc2 etching
vtx = [col_structs{j}.struc2.x1,row_structs{i}.struc2.y1;
       col_structs{j}.struc2.x2,row_structs{i}.struc2.y1;
       col_structs{j}.struc2.x2,row_structs{i}.struc2.y2;
       col_structs{j}.struc2.x1,row_structs{i}.struc2.y2];
addpoly;
set("name","struc2");
set("vertices",vtx);
set("z min",220e-9-step2);
set("z max",220e-9);
set("material","SiO2 (Glass) - Palik");
set("override mesh order from material database",1);
set("mesh order",2);

#breakpoint;
points = struct;
#----------build tot grating
for (i = 1:1:N)
{
    groupscope("::model");
    row_name = "row"+num2str(i);
    addstructuregroup;
    set("name",row_name);
    
    for (j = 1:1:N)
    {
        col_name = "col"+num2str(j);
        # copy grating unit group
        select("::model::template");
        copy;
        unit_name = "unit_"+row_name+col_name;
        set("name",unit_name);
        groupscope("::model::"+unit_name);
        # x + y * tan
        # x * tan + y * (tan^2 + 1)
        # x*(tct*tct+1)+y*tct,
        # x*tct+y*(tct*tct+1);
        points.vtx = {"vertices":[(col_structs{j}.struc1.x1*(tct*tct+1)+row_structs{i}.struc1.y1*tct),
                                  (col_structs{j}.struc1.x1*tct+row_structs{i}.struc1.y1*(tct*tct+1)); 
                                  (col_structs{j}.struc1.x2*(tct*tct+1)+row_structs{i}.struc1.y1*tct),
                                  (col_structs{j}.struc1.x2*tct+row_structs{i}.struc1.y1*(tct*tct+1));
                                  (col_structs{j}.struc1.x2*(tct*tct+1)+row_structs{i}.struc1.y2*tct),
                                  (col_structs{j}.struc1.x2*tct+row_structs{i}.struc1.y2*(tct*tct+1));
                                  (col_structs{j}.struc1.x1*(tct*tct+1)+row_structs{i}.struc1.y2*tct),
                                  (col_structs{j}.struc1.x1*tct+row_structs{i}.struc1.y2*(tct*tct+1))]};
        setnamed("struc1", points.vtx);
        points.vtx = {"vertices":[(col_structs{j}.struc2.x1*(tct*tct+1)+row_structs{i}.struc2.y1*tct),
                                  (col_structs{j}.struc2.x1*tct+row_structs{i}.struc2.y1*(tct*tct+1)); 
                                  (col_structs{j}.struc2.x2*(tct*tct+1)+row_structs{i}.struc2.y1*tct),
                                  (col_structs{j}.struc2.x2*tct+row_structs{i}.struc2.y1*(tct*tct+1));
                                  (col_structs{j}.struc2.x2*(tct*tct+1)+row_structs{i}.struc2.y2*tct),
                                  (col_structs{j}.struc2.x2*tct+row_structs{i}.struc2.y2*(tct*tct+1));
                                  (col_structs{j}.struc2.x1*(tct*tct+1)+row_structs{i}.struc2.y2*tct),
                                  (col_structs{j}.struc2.x1*tct+row_structs{i}.struc2.y2*(tct*tct+1))]};
        setnamed("struc2", points.vtx);
        
        # group distribution to optimize the designer performance
        select("::model::"+unit_name);
        addtogroup("::model::"+row_name);
    }
    groupscope("::model");
    
    # group distribution to optimize the designer performance
            
    select(row_name);
    addtogroup("::model::grating");
}

select("::model::grating");
addtogroup("::model::DO_NOT_OPEN");
select("::model::template");
delete;


