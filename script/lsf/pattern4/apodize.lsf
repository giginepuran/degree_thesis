newproject;
# 1:for pso workflow, 2:for expand bandwidth with 200nm
band_mode = 1;
# 1:for pso workflow, 2:for accuracy fsp
accu_mode = 1;
# 1:for python, 2:for lumerical
mode = 1;
if (mode == 1)
{
    l1 = [para1__1, para1__2, para1__3, para1__4, para1__5,
          para1__6, para1__7, para1__8, para1__9, para1__10,
          para1__11,para1__12,para1__13,para1__14,para1__15,
          para1__16,para1__17,para1__18,para1__19,para1__20]*1e-9;

    l2 = [para2__1, para2__2, para2__3, para2__4, para2__5,
          para2__6, para2__7, para2__8, para2__9, para2__10,
          para2__11,para2__12,para2__13,para2__14,para2__15,
          para2__16,para2__17,para2__18,para2__19,para2__20]*1e-9;

    l3 = [para3__1, para3__2, para3__3, para3__4, para3__5,
          para3__6, para3__7, para3__8, para3__9, para3__10,
          para3__11,para3__12,para3__13,para3__14,para3__15,
          para3__16,para3__17,para3__18,para3__19,para3__20]*1e-9;
    cell_tilt = para4__1;
    
    deep    = 220*1e-9;
    shallow = 70*1e-9;
    tilt    = 10;
} else if (mode == 2)
{
    l1 = [180, 180, 180, 180, 180,
          180, 180, 180, 180, 180,
          180, 180, 180, 180, 180,
          180, 180, 180, 180, 180]*1e-9;

    l2 = [130, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 
          130, 130, 130, 130, 130, 
          130, 130, 130, 130, 130]*1e-9;

    l3 = [450, 450, 450, 450, 450,
          500, 500, 500, 500, 500,
          550, 550, 550, 550, 550,
          600, 600, 600, 600, 600]*1e-9;
    cell_tilt = -5;
    deep    = 220*1e-9;
    shallow = 70*1e-9;
    tilt    = 10;
}
tct = tan(cell_tilt*pi/180);
cct = cos(cell_tilt*pi/180);
sct = sin(cell_tilt*pi/180);
unit = l3;
height = 220e-9;
N = 20;
scale = sum(unit);
# x' = x*(tct*tct+1)+y*tct,
# y' = x*tct+y*(tct*tct+1);
p2x = 0*(tct*tct+1)+scale*tct;
p2y = 0*tct+scale*(tct*tct+1);
p3x = scale*(tct*tct+1)+scale*tct;
p3y = scale*tct+scale*(tct*tct+1);
p4x = scale*(tct*tct+1)+0*tct;
p4y = scale*tct+0*(tct*tct+1);
LBX = min([0,p2x]); #LB : lower boundary
LBY = min([0,p4y]);
UBX = max([p3x,p4x]); #UB : upper boundary
UBY = max([p2y,p3y]);
# enviroment and platform
pos_extend = 6.5e-6;
neg_extend = 2e-6;
BOX_thickness = 2e-6;
fiber_distance = 2e-6;
# groups---------------------------------------------
addstructuregroup;
set("name","DO_NOT_OPEN");

addstructuregroup;
set("name","other");

addanalysisgroup;
set("name","monitor");

addstructuregroup;
set("name","grating");

groupscope("::model");
# solver-----------------------------------------
addfdtd;
set("dimension", 2);  #  1 = 2D, 2 = 3D
set("x min", LBX - neg_extend);
set("x max", UBX + pos_extend);
set("y min", LBY - neg_extend);
set("y max", UBY + pos_extend);
set("z min", -BOX_thickness - 0.6e-6);
set("z max", height + fiber_distance + 0.6e-6);
if (accu_mode == 2)
{
    set("mesh accuracy",7);
}

# source-------------------------------------------
shift = fiber_distance*tan(tilt/180*pi);
addgaussian;
set("injection axis","z");
set("direction","Backward");
set("x", (UBX+LBX)/2-shift/2^0.5);
set("x span",UBX-LBX);
set("y", (UBY+LBY)/2-shift/2^0.5);
set("y span",UBY-LBY);
set("z", height+fiber_distance);
set("angle phi", 45);
set("angle theta", 0);
set("polarization angle", 45);
set("angle theta", -tilt);
set("use scalar approximation",1);
set("waist radius w0", 4.6e-6/(20/N));
set("set wavelength", 1);
set("optimize for short pulse", 0);
if (band_mode == 2)
{
    set("wavelength span", 200e-9);
}else{
    set("wavelength span", 0);
}
set("center wavelength", 1.55e-6);
set("distance from waist", 0);


# platform-------------------------------------------
groupscope("::model::other");
# BOX
addrect;
set("name","BOX");
set("x min", -20e-6);
set("x max", 30e-6);
set("y min", -20e-6);
set("y max", 30e-6);
set("z min", -BOX_thickness);
set("z max", 0);
set("material","SiO2 (Glass) - Palik");
set("override mesh order from material database",1);
set("mesh order",5);

# substrate
addrect;
set("name","substrate");
set("x min", -20e-6);
set("x max", 30e-6);
set("y min", -20e-6);
set("y max", 30e-6);
set("z min", -BOX_thickness - 2e-6);
set("z max", -BOX_thickness);
set("material","Si (Silicon) - Palik");
set("override mesh order from material database",1);
set("mesh order",5);

# overcladding
addrect;
set("name","overcladding");
set("x min", -20e-6);
set("x max", 30e-6);
set("y min", -20e-6);
set("y max", 30e-6);
set("z min", height);
set("z max", height + fiber_distance + 1e-6);
set("material","SiO2 (Glass) - Palik");
set("override mesh order from material database",1);
set("mesh order",5);

# sidecladding
addrect;
set("name","sidecladding");
set("x min", -20e-6);
set("x max", 30e-6);
set("y min", -20e-6);
set("y max", 30e-6);
set("z min", 0);
set("z max", height);
set("material","SiO2 (Glass) - Palik");
set("override mesh order from material database",1);
set("mesh order",5);

# waveguides
vtx = [p2x,p2y;
       p2x,UBY + pos_extend + 1e-6;
       p3x,UBY + pos_extend + 1e-6;
       p3x,p3y];
addpoly;
set("name","wg1");
set("vertices",vtx);
set("z min",0);
set("z max",height);
set("material","Si (Silicon) - Palik");
set("override mesh order from material database",1);
set("mesh order",2);

vtx = [p4x,p4y;
       p3x,p3y;
       UBX + pos_extend + 1e-6,p3y;
       UBX + pos_extend + 1e-6,p4y];
addpoly;
set("name","wg2");
set("vertices",vtx);
set("z min",0);
set("z max",height);
set("material","Si (Silicon) - Palik");
set("override mesh order from material database",1);
set("mesh order",2);

select("::model::other");
addtogroup("DO_NOT_OPEN");

# monitor ----------------------------------------
groupscope("::model::monitor");
# wg1(+y)
addpower;
set("name","P_wg1");
set("monitor type","2D Y-normal");
set("x min", p2x - 1e-6);
set("x max", p3x + 1e-6);
set("y", UBY + 1e-6);
set("z", height/2);
set("z span", 0.5e-6);

# wg2(+x)
addpower;
set("name","P_wg2");
set("monitor type","2D X-normal");
set("x", UBX + 1e-6);
set("y min", p4y - 1e-6);
set("y max", p3y + 1e-6);
set("z", height/2);
set("z span", 0.5e-6);

# wg2 far (+x)
addpower;
set("name","P_wg2_far");
set("monitor type","2D X-normal");
set("x", UBX + pos_extend - 1e-6);
set("y min", p4y - 1e-6);
set("y max", p3y + 1e-6);
set("z", height/2);
set("z span", 0.5e-6);

# wg2 center (+x)
addpower;
set("name","P_wg2_center");
set("monitor type","2D X-normal");
set("x", UBX + pos_extend - 1e-6);
set("y", (p3y+p4y)/2);
set("y span", (p3y-p4y)/6);
set("z", height/2);
set("z span", 0.5e-6);
    
# refractive index monitors
addindex;
set("name","index_monitor_70");
set("monitor type","2D Z-normal");
set("x min", LBX - neg_extend);
set("x max", UBX + pos_extend);
set("y min", LBY - neg_extend);
set("y max", UBY + pos_extend);
set("z", 70e-9);
    
addindex;
set("name","index_monitor_150");
set("monitor type","2D Z-normal");
set("x min", LBX - neg_extend);
set("x max", UBX + pos_extend);
set("y min", LBY - neg_extend);
set("y max", UBY + pos_extend);
set("z", 150e-9);


# reflection monitor
addpower;
set("name","reflection");
set("monitor type","2D Z-normal");
set("x min", LBX - neg_extend);
set("x max", UBX + pos_extend);
set("y min", LBY - neg_extend);
set("y max", UBY + pos_extend);
set("z", height + fiber_distance + 0.5e-6);

# central top view
addpower;
set("name","top_view");
set("monitor type","2D Z-normal");
set("x min", LBX - neg_extend);
set("x max", UBX + pos_extend);
set("y min", LBY - neg_extend);
set("y max", UBY + pos_extend);
set("z", height/2);

# transmission monitor
addpower;
set("name","trasmission");
set("monitor type","2D Z-normal");
set("x min", LBX - neg_extend);
set("x max", UBX + pos_extend);
set("y min", LBY - neg_extend);
set("y max", UBY + pos_extend);
set("z", -BOX_thickness - 0.5e-6);

#-------grating template-----------------------
xy = 0;
for (i = 1:1:19)
{
    xy = [xy, sum(unit(1:i))];
}


#---------------
row_structs = cell(N);
col_structs = cell(N);

for (i = 1:1:N)
{
    # create struct
    para = struct;
    para.shallow = struct;
    para.deep = struct;
    
    # change to row para
    para.shallow = {"ymin":xy(i)-l1(i)+unit(i) , "ymax":xy(i)+unit(i)};
    para.deep = {"ymin":xy(i)-l2(i)+unit(i) , "ymax":xy(i)+unit(i)};
    row_structs{i} = para;    
    
    # change to col para
    para.shallow = {"xmin":xy(i)-l1(i)+unit(i) , "xmax":xy(i)+unit(i)};
    para.deep = {"xmin":xy(i)-l2(i)+unit(i) , "xmax":xy(i)+unit(i)};
    col_structs{i} = para;
}


groupscope("::model");
addstructuregroup;
set("name","template");

# silicon for all
vtx = [0,0;
       p2x,p2y;
       p3x,p3y;
       p4x,p4y];
addpoly;
set("name","silicon");
set("vertices",vtx);
set("z min",0);
set("z max",height);
set("material","Si (Silicon) - Palik");
set("override mesh order from material database",1);
set("mesh order",4);
addtogroup("DO_NOT_OPEN");

i = 1;
j = 1;
groupscope("::model::template");
# shallow etching
vtx = [col_structs{j}.shallow.xmin,row_structs{i}.shallow.ymin;
       col_structs{j}.shallow.xmax,row_structs{i}.shallow.ymin;
       col_structs{j}.shallow.xmax,row_structs{i}.shallow.ymax;
       col_structs{j}.shallow.xmin,row_structs{i}.shallow.ymax];
addpoly;
set("name","shallow");
set("vertices",vtx);
set("z min",220e-9-shallow);
set("z max",220e-9);
set("material","SiO2 (Glass) - Palik");
set("override mesh order from material database",1);
set("mesh order",3);
# deep etching
vtx = [col_structs{j}.deep.xmin,row_structs{i}.deep.ymin;
       col_structs{j}.deep.xmax,row_structs{i}.deep.ymin;
       col_structs{j}.deep.xmax,row_structs{i}.deep.ymax;
       col_structs{j}.deep.xmin,row_structs{i}.deep.ymax];
addpoly;
set("name","deep");
set("vertices",vtx);
set("z min",220e-9-deep);
set("z max",220e-9);
set("material","SiO2 (Glass) - Palik");
set("override mesh order from material database",1);
set("mesh order",2);

#breakpoint;
points = struct;
#----------build tot grating
for (i = 1:1:N)
{
    groupscope("::model");
    row_name = "row"+num2str(i);
    addstructuregroup;
    set("name",row_name);
    
    for (j = 1:1:N)
    {
        col_name = "col"+num2str(j);
        # copy grating unit group
        select("::model::template");
        copy;
        unit_name = "unit_"+row_name+col_name;
        set("name",unit_name);
        groupscope("::model::"+unit_name);
        # x + y * tan
        # x * tan + y * (tan^2 + 1)
        # x*(tct*tct+1)+y*tct,
        # x*tct+y*(tct*tct+1);
        points.vtx = {"vertices":[(col_structs{j}.shallow.xmin*(tct*tct+1)+row_structs{i}.shallow.ymin*tct),
                                  (col_structs{j}.shallow.xmin*tct+row_structs{i}.shallow.ymin*(tct*tct+1)); 
                                  (col_structs{j}.shallow.xmax*(tct*tct+1)+row_structs{i}.shallow.ymin*tct),
                                  (col_structs{j}.shallow.xmax*tct+row_structs{i}.shallow.ymin*(tct*tct+1));
                                  (col_structs{j}.shallow.xmax*(tct*tct+1)+row_structs{i}.shallow.ymax*tct),
                                  (col_structs{j}.shallow.xmax*tct+row_structs{i}.shallow.ymax*(tct*tct+1));
                                  (col_structs{j}.shallow.xmin*(tct*tct+1)+row_structs{i}.shallow.ymax*tct),
                                  (col_structs{j}.shallow.xmin*tct+row_structs{i}.shallow.ymax*(tct*tct+1))]};
        setnamed("shallow", points.vtx);
        points.vtx = {"vertices":[col_structs{j}.deep.xmin*(tct*tct+1)+row_structs{i}.deep.ymin*tct,
                                  col_structs{j}.deep.xmin*tct+row_structs{i}.deep.ymin*(tct*tct+1);
                                  col_structs{j}.deep.xmax*(tct*tct+1)+row_structs{i}.deep.ymin*tct,
                                  col_structs{j}.deep.xmax*tct+row_structs{i}.deep.ymin*(tct*tct+1);                                  
                                  col_structs{j}.deep.xmax*(tct*tct+1)+row_structs{i}.deep.ymax*tct,
                                  col_structs{j}.deep.xmax*tct+row_structs{i}.deep.ymax*(tct*tct+1);                                  
                                  col_structs{j}.deep.xmin*(tct*tct+1)+row_structs{i}.deep.ymax*tct,
                                  col_structs{j}.deep.xmin*tct+row_structs{i}.deep.ymax*(tct*tct+1)]};
        setnamed("deep", points.vtx);
        
        # group distribution to optimize the designer performance
        select("::model::"+unit_name);
        addtogroup("::model::"+row_name);
    }
    groupscope("::model");
    
    # group distribution to optimize the designer performance
            
    select(row_name);
    addtogroup("::model::grating");
}

select("::model::grating");
addtogroup("::model::DO_NOT_OPEN");
select("::model::template");
delete;

